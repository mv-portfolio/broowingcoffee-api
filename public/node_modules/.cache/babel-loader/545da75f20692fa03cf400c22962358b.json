{"ast":null,"code":"const isTypeof = (type, value1, value2) => {\n  if (type === 'array') {\n    return Array.isArray(value1) ? value1 : value2;\n  }\n\n  return typeof value1 === type ? value1 : value2;\n};\n\nconst isName = val => {\n  return /^[a-zA-Z ]*$/.test(val);\n};\n\nconst isInteger = val => {\n  return /^[0-9]*$/.test(val);\n};\n\nconst isDouble = val => {\n  return /^\\$?\\d+(,\\d{3})*(\\.\\d*)?$/.test(val);\n};\n\nconst isUsername = val => {\n  return /^[a-zA-Z0-9]*$/.test(val);\n};\n\nconst isEmail = val => {\n  return /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test(val);\n};\n\nconst isPassword = (val, length) => {\n  return hasUpperCaseLetter(val) && hasLowerCaseLetter(val) && hasNumber(val) && val.length >= (length || 6);\n};\n\nconst hasUpperCaseLetter = val => {\n  return /(?=.*([A-Z]))/.test(val);\n};\n\nconst hasLowerCaseLetter = val => {\n  return /(?=.*([a-z]))/.test(val);\n};\n\nconst hasLetter = val => {\n  return /(?=.*([a-zA-Z]))/.test(val);\n};\n\nconst hasNumber = val => {\n  return /(?=.*[0-9])/.test(val);\n};\n\nconst hasSymbol = val => {\n  return /(?=.*[!@#$%^&*()_=+-/])/.test(val);\n};\n\nconst isString = value => {\n  return typeof value === 'string';\n};\n\nconst isArray = value => {\n  return Array.isArray(value);\n};\n\nconst isObject = value => {\n  return typeof value === 'object';\n};\n\nconst isJsonString = value => {\n  try {\n    const isObject = value.slice(0, 1) === '{' && value.slice(value.length - 1) === '}';\n\n    if (typeof value === 'string' && isObject) {\n      JSON.parse(value);\n    } else {\n      return false;\n    }\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  isTypeof,\n  isName,\n  isInteger,\n  isDouble,\n  hasNumber,\n  hasLetter,\n  isEmail,\n  isUsername,\n  isPassword,\n  isString,\n  isJsonString,\n  isArray,\n  isObject,\n  hasSymbol,\n  hasUpperCaseLetter,\n  hasLowerCaseLetter\n};","map":{"version":3,"sources":["C:/Users/Makaru/Documents/React Project/broowingcoffee-web-server/src/utils/checker.js"],"names":["isTypeof","type","value1","value2","Array","isArray","isName","val","test","isInteger","isDouble","isUsername","isEmail","isPassword","length","hasUpperCaseLetter","hasLowerCaseLetter","hasNumber","hasLetter","hasSymbol","isString","value","isObject","isJsonString","slice","JSON","parse","err","module","exports"],"mappings":"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","sourcesContent":["const isTypeof = (type, value1, value2) => {\r\n  if (type === 'array') {\r\n    return Array.isArray(value1) ? value1 : value2;\r\n  }\r\n  return typeof value1 === type ? value1 : value2;\r\n};\r\nconst isName = val => {\r\n  return /^[a-zA-Z ]*$/.test(val);\r\n};\r\nconst isInteger = val => {\r\n  return /^[0-9]*$/.test(val);\r\n};\r\nconst isDouble = val => {\r\n  return /^\\$?\\d+(,\\d{3})*(\\.\\d*)?$/.test(val);\r\n};\r\nconst isUsername = val => {\r\n  return /^[a-zA-Z0-9]*$/.test(val);\r\n};\r\nconst isEmail = val => {\r\n  return /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test(\r\n    val,\r\n  );\r\n};\r\nconst isPassword = (val, length) => {\r\n  return (\r\n    hasUpperCaseLetter(val) &&\r\n    hasLowerCaseLetter(val) &&\r\n    hasNumber(val) &&\r\n    val.length >= (length || 6)\r\n  );\r\n};\r\nconst hasUpperCaseLetter = val => {\r\n  return /(?=.*([A-Z]))/.test(val);\r\n};\r\nconst hasLowerCaseLetter = val => {\r\n  return /(?=.*([a-z]))/.test(val);\r\n};\r\nconst hasLetter = val => {\r\n  return /(?=.*([a-zA-Z]))/.test(val);\r\n};\r\nconst hasNumber = val => {\r\n  return /(?=.*[0-9])/.test(val);\r\n};\r\nconst hasSymbol = val => {\r\n  return /(?=.*[!@#$%^&*()_=+-/])/.test(val);\r\n};\r\n\r\nconst isString = value => {\r\n  return typeof value === 'string';\r\n};\r\nconst isArray = value => {\r\n  return Array.isArray(value);\r\n};\r\nconst isObject = value => {\r\n  return typeof value === 'object';\r\n};\r\n\r\nconst isJsonString = value => {\r\n  try {\r\n    const isObject =\r\n      value.slice(0, 1) === '{' && value.slice(value.length - 1) === '}';\r\n    if (typeof value === 'string' && isObject) {\r\n      JSON.parse(value);\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nmodule.exports = {\r\n  isTypeof,\r\n  isName,\r\n  isInteger,\r\n  isDouble,\r\n  hasNumber,\r\n  hasLetter,\r\n  isEmail,\r\n  isUsername,\r\n  isPassword,\r\n  isString,\r\n  isJsonString,\r\n  isArray,\r\n  isObject,\r\n  hasSymbol,\r\n  hasUpperCaseLetter,\r\n  hasLowerCaseLetter,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}