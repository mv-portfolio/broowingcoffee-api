{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Makaru\\\\Documents\\\\React Project\\\\broowingcoffee-web-server\\\\src\\\\pages\\\\ResetPassword\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { ErrorPage, LoadingPage } from 'pages';\nimport { SECRET_KEY, SERVER } from 'utils/env';\nimport { Text, TextInput, View, Separator, Button } from 'components';\nimport styles from './.module.css';\nimport { resetPassword as resetPasswordReducer, resetPasswordInitState } from 'hooks';\nimport { hasLowerCaseLetter, hasNumber, hasSymbol, hasUpperCaseLetter } from 'utils/checker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s();\n\n  const {\n    token\n  } = useParams();\n  const [state, setState] = useReducer(resetPasswordReducer, resetPasswordInitState);\n  useEffect(() => {\n    fetch(`${SERVER}/${SECRET_KEY}/api/service/reset-password-auth`, {\n      headers: {\n        'reset-auth-token': token\n      }\n    }).then(res => res.json()).then(res => {\n      if (!res.status) {\n        setState({\n          type: 'set',\n          authRequest: 'failed'\n        });\n        return;\n      }\n\n      const {\n        res: {\n          email,\n          token\n        }\n      } = res;\n      console.log({\n        email,\n        token\n      });\n      setState({\n        type: 'set',\n        authRequest: 'success',\n        email,\n        token\n      });\n    });\n  }, []);\n\n  const strength = val => {\n    let strength = 0;\n\n    if (hasUpperCaseLetter(val)) {\n      if (val.length > 2) {\n        strength += 15;\n      }\n\n      strength += 10;\n    }\n\n    if (hasLowerCaseLetter(val)) {\n      if (val.length > 4) {\n        strength += 15;\n      }\n\n      strength += 10;\n    }\n\n    if (hasSymbol(val)) {\n      if (val.length > 6) {\n        strength += 15;\n      }\n\n      strength += 10;\n    }\n\n    if (hasNumber(val)) {\n      if (val.length > 8) {\n        strength += 15;\n      }\n\n      strength += 10;\n    }\n\n    return strength;\n  };\n\n  const onChangeText = (component, val) => {\n    if (component === 'new-password') {\n      setState({\n        type: 'set',\n        newPassword: val,\n        passwordStrength: strength(val),\n        isMatched: val === state.confirmPassword\n      });\n      return;\n    }\n\n    if (component === 'confirm-password') {\n      setState({\n        type: 'set',\n        confirmPassword: val,\n        isMatched: val === state.newPassword\n      });\n      return;\n    }\n  };\n\n  const onClickChange = () => {\n    if (!state.isMatched) {\n      setState({\n        type: 'set',\n        resetRequest: 'failed',\n        messageRequest: 'Passwords does not matched'\n      });\n      return;\n    } // fetch(`${SERVER}/${SECRET_KEY}/api/service/reset-password-decoder`, {\n    //   method: 'POST',\n    //   body: {\n    //     email: state.email,\n    //     newPassword: state.newPassword,\n    //     confirmPassword: state.confirmPassword,\n    //   },\n    // })\n    //   .then(res => res.json())\n    //   .then(res => {\n    //     console.log(res);\n    //   });\n\n  };\n\n  if (state.authRequest === 'success') {\n    return /*#__PURE__*/_jsxDEV(View, {\n      style: styles.mainPane,\n      children: [/*#__PURE__*/_jsxDEV(View, {\n        style: styles.topPane,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          style: styles.title,\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Separator, {\n          vertical: 0.25\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          style: styles.subtitle,\n          children: \"Please be sure, the password you enter was not leaked to anyone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Separator, {\n        vertical: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(View, {\n        style: styles.bodyPane,\n        children: [/*#__PURE__*/_jsxDEV(TextInput, {\n          skinStyle: styles.inputSkin,\n          placeholder: \"New Password\",\n          showIndicator: true,\n          indicatorProgress: state.passwordStrength,\n          isTextEncrypt: state.isEncrypt,\n          value: state.newPassword,\n          onChangeText: text => onChangeText('new-password', text)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Separator, {\n          vertical: 0.5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          skinStyle: styles.inputSkin,\n          placeholder: \"Confirm Password\",\n          isTextEncrypt: state.isEncrypt,\n          onTextEncrypt: () => setState({\n            type: 'set',\n            isEncrypt: !state.isEncrypt\n          }),\n          value: state.confirmPassword,\n          onChangeText: text => onChangeText('confirm-password', text)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Separator, {\n          vertical: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: styles.button,\n          title: \"Change\",\n          onClick: onClickChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Separator, {\n        vertical: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(View, {\n        style: styles.bottomPane,\n        children: [state.resetRequest === 'failed' && /*#__PURE__*/_jsxDEV(View, {\n          style: styles.errorPane,\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.errorTitle,\n            children: state.messageRequest\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), state.resetRequest === 'success' && /*#__PURE__*/_jsxDEV(View, {\n          style: styles.infoPane,\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.infoTitle,\n            children: state.messageRequest\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (state.authRequest === 'failed') {\n    return /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(LoadingPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 10\n  }, this);\n}\n\n_s(HomePage, \"pXIESGqYZoaA0ADLE+oUlXLJkPA=\", false, function () {\n  return [useParams];\n});\n\n_c = HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/Makaru/Documents/React Project/broowingcoffee-web-server/src/pages/ResetPassword/index.js"],"names":["useEffect","useReducer","useState","useParams","ErrorPage","LoadingPage","SECRET_KEY","SERVER","Text","TextInput","View","Separator","Button","styles","resetPassword","resetPasswordReducer","resetPasswordInitState","hasLowerCaseLetter","hasNumber","hasSymbol","hasUpperCaseLetter","HomePage","token","state","setState","fetch","headers","then","res","json","status","type","authRequest","email","console","log","strength","val","length","onChangeText","component","newPassword","passwordStrength","isMatched","confirmPassword","onClickChange","resetRequest","messageRequest","mainPane","topPane","title","subtitle","bodyPane","inputSkin","isEncrypt","text","button","bottomPane","errorPane","errorTitle","infoPane","infoTitle"],"mappings":"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","sourcesContent":["import {useEffect, useReducer, useState} from 'react';\r\nimport {useParams} from 'react-router';\r\nimport {ErrorPage, LoadingPage} from 'pages';\r\nimport {SECRET_KEY, SERVER} from 'utils/env';\r\nimport {Text, TextInput, View, Separator, Button} from 'components';\r\nimport styles from './.module.css';\r\nimport {resetPassword as resetPasswordReducer, resetPasswordInitState} from 'hooks';\r\nimport {\r\n  hasLowerCaseLetter,\r\n  hasNumber,\r\n  hasSymbol,\r\n  hasUpperCaseLetter,\r\n} from 'utils/checker';\r\n\r\nexport default function HomePage() {\r\n  const {token} = useParams();\r\n  const [state, setState] = useReducer(resetPasswordReducer, resetPasswordInitState);\r\n\r\n  useEffect(() => {\r\n    fetch(`${SERVER}/${SECRET_KEY}/api/service/reset-password-auth`, {\r\n      headers: {'reset-auth-token': token},\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (!res.status) {\r\n          setState({type: 'set', authRequest: 'failed'});\r\n          return;\r\n        }\r\n        const {\r\n          res: {email, token},\r\n        } = res;\r\n        console.log({email, token});\r\n        setState({type: 'set', authRequest: 'success', email, token});\r\n      });\r\n  }, []);\r\n\r\n  const strength = val => {\r\n    let strength = 0;\r\n    if (hasUpperCaseLetter(val)) {\r\n      if (val.length > 2) {\r\n        strength += 15;\r\n      }\r\n      strength += 10;\r\n    }\r\n    if (hasLowerCaseLetter(val)) {\r\n      if (val.length > 4) {\r\n        strength += 15;\r\n      }\r\n      strength += 10;\r\n    }\r\n    if (hasSymbol(val)) {\r\n      if (val.length > 6) {\r\n        strength += 15;\r\n      }\r\n      strength += 10;\r\n    }\r\n    if (hasNumber(val)) {\r\n      if (val.length > 8) {\r\n        strength += 15;\r\n      }\r\n      strength += 10;\r\n    }\r\n    return strength;\r\n  };\r\n  const onChangeText = (component, val) => {\r\n    if (component === 'new-password') {\r\n      setState({\r\n        type: 'set',\r\n        newPassword: val,\r\n        passwordStrength: strength(val),\r\n        isMatched: val === state.confirmPassword,\r\n      });\r\n      return;\r\n    }\r\n    if (component === 'confirm-password') {\r\n      setState({\r\n        type: 'set',\r\n        confirmPassword: val,\r\n        isMatched: val === state.newPassword,\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const onClickChange = () => {\r\n    if (!state.isMatched) {\r\n      setState({\r\n        type: 'set',\r\n        resetRequest: 'failed',\r\n        messageRequest: 'Passwords does not matched',\r\n      });\r\n      return;\r\n    }\r\n    // fetch(`${SERVER}/${SECRET_KEY}/api/service/reset-password-decoder`, {\r\n    //   method: 'POST',\r\n    //   body: {\r\n    //     email: state.email,\r\n    //     newPassword: state.newPassword,\r\n    //     confirmPassword: state.confirmPassword,\r\n    //   },\r\n    // })\r\n    //   .then(res => res.json())\r\n    //   .then(res => {\r\n    //     console.log(res);\r\n    //   });\r\n  };\r\n\r\n  if (state.authRequest === 'success') {\r\n    return (\r\n      <View style={styles.mainPane}>\r\n        <View style={styles.topPane}>\r\n          <Text style={styles.title}>New Password</Text>\r\n          <Separator vertical={0.25} />\r\n          <Text style={styles.subtitle}>\r\n            Please be sure, the password you enter was not leaked to anyone\r\n          </Text>\r\n        </View>\r\n        <Separator vertical={2} />\r\n        <View style={styles.bodyPane}>\r\n          <TextInput\r\n            skinStyle={styles.inputSkin}\r\n            placeholder='New Password'\r\n            showIndicator={true}\r\n            indicatorProgress={state.passwordStrength}\r\n            isTextEncrypt={state.isEncrypt}\r\n            value={state.newPassword}\r\n            onChangeText={text => onChangeText('new-password', text)}\r\n          />\r\n          <Separator vertical={0.5} />\r\n          <TextInput\r\n            skinStyle={styles.inputSkin}\r\n            placeholder='Confirm Password'\r\n            isTextEncrypt={state.isEncrypt}\r\n            onTextEncrypt={() => setState({type: 'set', isEncrypt: !state.isEncrypt})}\r\n            value={state.confirmPassword}\r\n            onChangeText={text => onChangeText('confirm-password', text)}\r\n          />\r\n          <Separator vertical={1} />\r\n          <Button style={styles.button} title='Change' onClick={onClickChange} />\r\n        </View>\r\n        <Separator vertical={1} />\r\n        <View style={styles.bottomPane}>\r\n          {state.resetRequest === 'failed' && (\r\n            <View style={styles.errorPane}>\r\n              <Text style={styles.errorTitle}>{state.messageRequest}</Text>\r\n            </View>\r\n          )}\r\n          {state.resetRequest === 'success' && (\r\n            <View style={styles.infoPane}>\r\n              <Text style={styles.infoTitle}>{state.messageRequest}</Text>\r\n            </View>\r\n          )}\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (state.authRequest === 'failed') {\r\n    return <ErrorPage />;\r\n  }\r\n\r\n  return <LoadingPage />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}