{"ast":null,"code":"import _slicedToArray from\"C:/Users/Makaru/Documents/React Project/broowingcoffee-web-server/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useReducer,useState}from'react';import{useParams}from'react-router';import{ErrorPage,LoadingPage,SuccessPage}from'pages';import{Text,TextInput,View,Separator,Button}from'components';import styles from'./.module.css';import{resetPassword as resetPasswordReducer,resetPasswordInitState}from'hooks';import{hasLowerCaseLetter,hasNumber,hasSymbol,hasUpperCaseLetter}from'utils/checker';import{server}from'network/service';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function HomePage(){var _useParams=useParams(),token=_useParams.token;var _useReducer=useReducer(resetPasswordReducer,resetPasswordInitState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],setState=_useReducer2[1];useEffect(function(){server.peek('/reset-password-auth',{headers:{'reset-auth-token':token}}).then(function(res){var _res$res=res.res,email=_res$res.email,token=_res$res.token,status=res.status;if(status){setState({type:'set',authRequest:'success',email:email,token:token});}}).catch(function(err){setState({type:'set',authRequest:'failed'});});},[]);var strength=function strength(val){var strength=0;if(hasUpperCaseLetter(val)){if(val.length>2){strength+=15;}strength+=10;}if(hasLowerCaseLetter(val)){if(val.length>4){strength+=15;}strength+=10;}if(hasSymbol(val)){if(val.length>6){strength+=15;}strength+=10;}if(hasNumber(val)){if(val.length>8){strength+=15;}strength+=10;}return strength;};var _onChangeText=function onChangeText(component,val){if(component==='new-password'){setState({type:'set',newPassword:val,passwordStrength:strength(val),isMatched:val===state.confirmPassword});return;}if(component==='confirm-password'){setState({type:'set',confirmPassword:val,isMatched:val===state.newPassword});return;}};var onClickChange=function onClickChange(){if(!state.isMatched){setState({type:'set',resetRequest:'failed',messageRequest:'Passwords does not matched'});return;}server.push('/reset-password-decoder',{email:state.email,newPassword:state.newPassword,confirmPassword:state.confirmPassword},{headers:{'reset-auth-token':state.token}}).then(function(res){setState({type:'set',authRequest:'success-done'});}).catch(function(err){setState({type:'set',authRequest:'failed'});});};if(state.authRequest==='success'){return/*#__PURE__*/_jsxs(View,{style:styles.mainPane,children:[/*#__PURE__*/_jsx(View,{style:styles.topPane,children:/*#__PURE__*/_jsxs(View,{style:styles.headerPane,children:[/*#__PURE__*/_jsx(Text,{style:styles.title,children:\"New Password\"}),/*#__PURE__*/_jsx(Separator,{vertical:0.25}),/*#__PURE__*/_jsx(Text,{style:styles.subtitle,children:\"Please be sure, the password you enter was not leaked to anyone\"})]})}),/*#__PURE__*/_jsxs(View,{style:styles.bodyPane,children:[/*#__PURE__*/_jsx(TextInput,{skinStyle:styles.inputSkin,placeholder:\"New Password\",showIndicator:true,indicatorProgress:state.passwordStrength,isTextEncrypt:state.isEncrypt,value:state.newPassword,onChangeText:function onChangeText(text){return _onChangeText('new-password',text);}}),/*#__PURE__*/_jsx(Separator,{vertical:0.5}),/*#__PURE__*/_jsx(TextInput,{skinStyle:styles.inputSkin,placeholder:\"Confirm Password\",isTextEncrypt:state.isEncrypt,onTextEncrypt:function onTextEncrypt(){return setState({type:'set',isEncrypt:!state.isEncrypt});},value:state.confirmPassword,onChangeText:function onChangeText(text){return _onChangeText('confirm-password',text);}}),/*#__PURE__*/_jsx(Separator,{vertical:1}),/*#__PURE__*/_jsx(Button,{style:styles.button,title:\"Change\",onClick:onClickChange})]}),/*#__PURE__*/_jsxs(View,{style:styles.bottomPane,children:[state.resetRequest==='failed'&&/*#__PURE__*/_jsx(View,{style:styles.errorPane,children:/*#__PURE__*/_jsx(Text,{style:styles.errorTitle,children:state.messageRequest})}),state.resetRequest==='success'&&/*#__PURE__*/_jsx(View,{style:styles.infoPane,children:/*#__PURE__*/_jsx(Text,{style:styles.infoTitle,children:state.messageRequest})})]})]});}if(state.authRequest==='success-done'){return/*#__PURE__*/_jsx(SuccessPage,{title:\"Password Saved\",subtitle:\"You may now use the new password you entered\"});}if(state.authRequest==='failed'){return/*#__PURE__*/_jsx(ErrorPage,{});}return/*#__PURE__*/_jsx(LoadingPage,{});}","map":{"version":3,"sources":["C:/Users/Makaru/Documents/React Project/broowingcoffee-web-server/src/pages/ResetPassword/index.js"],"names":["useEffect","useReducer","useState","useParams","ErrorPage","LoadingPage","SuccessPage","Text","TextInput","View","Separator","Button","styles","resetPassword","resetPasswordReducer","resetPasswordInitState","hasLowerCaseLetter","hasNumber","hasSymbol","hasUpperCaseLetter","server","HomePage","token","state","setState","peek","headers","then","res","email","status","type","authRequest","catch","err","strength","val","length","onChangeText","component","newPassword","passwordStrength","isMatched","confirmPassword","onClickChange","resetRequest","messageRequest","push","mainPane","topPane","headerPane","title","subtitle","bodyPane","inputSkin","isEncrypt","text","button","bottomPane","errorPane","errorTitle","infoPane","infoTitle"],"mappings":"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","sourcesContent":["import {useEffect, useReducer, useState} from 'react';\r\nimport {useParams} from 'react-router';\r\nimport {ErrorPage, LoadingPage, SuccessPage} from 'pages';\r\nimport {Text, TextInput, View, Separator, Button} from 'components';\r\nimport styles from './.module.css';\r\nimport {resetPassword as resetPasswordReducer, resetPasswordInitState} from 'hooks';\r\nimport {\r\n  hasLowerCaseLetter,\r\n  hasNumber,\r\n  hasSymbol,\r\n  hasUpperCaseLetter,\r\n} from 'utils/checker';\r\nimport {server} from 'network/service';\r\n\r\nexport default function HomePage() {\r\n  const {token} = useParams();\r\n  const [state, setState] = useReducer(resetPasswordReducer, resetPasswordInitState);\r\n\r\n  useEffect(() => {\r\n    server\r\n      .peek('/reset-password-auth', {\r\n        headers: {'reset-auth-token': token},\r\n      })\r\n      .then(res => {\r\n        const {\r\n          res: {email, token},\r\n          status,\r\n        } = res;\r\n        if (status) {\r\n          setState({type: 'set', authRequest: 'success', email, token});\r\n        }\r\n      })\r\n      .catch(err => {\r\n        setState({type: 'set', authRequest: 'failed'});\r\n      });\r\n  }, []);\r\n\r\n  const strength = val => {\r\n    let strength = 0;\r\n    if (hasUpperCaseLetter(val)) {\r\n      if (val.length > 2) {\r\n        strength += 15;\r\n      }\r\n      strength += 10;\r\n    }\r\n    if (hasLowerCaseLetter(val)) {\r\n      if (val.length > 4) {\r\n        strength += 15;\r\n      }\r\n      strength += 10;\r\n    }\r\n    if (hasSymbol(val)) {\r\n      if (val.length > 6) {\r\n        strength += 15;\r\n      }\r\n      strength += 10;\r\n    }\r\n    if (hasNumber(val)) {\r\n      if (val.length > 8) {\r\n        strength += 15;\r\n      }\r\n      strength += 10;\r\n    }\r\n    return strength;\r\n  };\r\n  const onChangeText = (component, val) => {\r\n    if (component === 'new-password') {\r\n      setState({\r\n        type: 'set',\r\n        newPassword: val,\r\n        passwordStrength: strength(val),\r\n        isMatched: val === state.confirmPassword,\r\n      });\r\n      return;\r\n    }\r\n    if (component === 'confirm-password') {\r\n      setState({\r\n        type: 'set',\r\n        confirmPassword: val,\r\n        isMatched: val === state.newPassword,\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const onClickChange = () => {\r\n    if (!state.isMatched) {\r\n      setState({\r\n        type: 'set',\r\n        resetRequest: 'failed',\r\n        messageRequest: 'Passwords does not matched',\r\n      });\r\n      return;\r\n    }\r\n\r\n    server\r\n      .push(\r\n        '/reset-password-decoder',\r\n        {\r\n          email: state.email,\r\n          newPassword: state.newPassword,\r\n          confirmPassword: state.confirmPassword,\r\n        },\r\n        {headers: {'reset-auth-token': state.token}},\r\n      )\r\n      .then(res => {\r\n        setState({type: 'set', authRequest: 'success-done'});\r\n      })\r\n      .catch(err => {\r\n        setState({type: 'set', authRequest: 'failed'});\r\n      });\r\n  };\r\n\r\n  if (state.authRequest === 'success') {\r\n    return (\r\n      <View style={styles.mainPane}>\r\n        <View style={styles.topPane}>\r\n          <View style={styles.headerPane}>\r\n            <Text style={styles.title}>New Password</Text>\r\n            <Separator vertical={0.25} />\r\n            <Text style={styles.subtitle}>\r\n              Please be sure, the password you enter was not leaked to anyone\r\n            </Text>\r\n          </View>\r\n        </View>\r\n        <View style={styles.bodyPane}>\r\n          <TextInput\r\n            skinStyle={styles.inputSkin}\r\n            placeholder='New Password'\r\n            showIndicator={true}\r\n            indicatorProgress={state.passwordStrength}\r\n            isTextEncrypt={state.isEncrypt}\r\n            value={state.newPassword}\r\n            onChangeText={text => onChangeText('new-password', text)}\r\n          />\r\n          <Separator vertical={0.5} />\r\n          <TextInput\r\n            skinStyle={styles.inputSkin}\r\n            placeholder='Confirm Password'\r\n            isTextEncrypt={state.isEncrypt}\r\n            onTextEncrypt={() => setState({type: 'set', isEncrypt: !state.isEncrypt})}\r\n            value={state.confirmPassword}\r\n            onChangeText={text => onChangeText('confirm-password', text)}\r\n          />\r\n          <Separator vertical={1} />\r\n          <Button style={styles.button} title='Change' onClick={onClickChange} />\r\n        </View>\r\n        <View style={styles.bottomPane}>\r\n          {state.resetRequest === 'failed' && (\r\n            <View style={styles.errorPane}>\r\n              <Text style={styles.errorTitle}>{state.messageRequest}</Text>\r\n            </View>\r\n          )}\r\n          {state.resetRequest === 'success' && (\r\n            <View style={styles.infoPane}>\r\n              <Text style={styles.infoTitle}>{state.messageRequest}</Text>\r\n            </View>\r\n          )}\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (state.authRequest === 'success-done') {\r\n    return (\r\n      <SuccessPage\r\n        title='Password Saved'\r\n        subtitle='You may now use the new password you entered'\r\n      />\r\n    );\r\n  }\r\n\r\n  if (state.authRequest === 'failed') {\r\n    return <ErrorPage />;\r\n  }\r\n\r\n  return <LoadingPage />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}