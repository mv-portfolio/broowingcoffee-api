{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Makaru\\\\Documents\\\\React Project\\\\broowingcoffee-web-server\\\\src\\\\pages\\\\ResetPassword\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { ErrorPage, LoadingPage } from 'pages';\nimport { SECRET_KEY, SERVER } from 'utils/env';\nimport { Text, TextInput, View, Separator, Button } from 'components';\nimport styles from './.module.css';\nimport { resetPassword as resetPasswordReducer, resetPasswordInitState } from 'hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s();\n\n  const {\n    token\n  } = useParams();\n  const [request, setRequest] = useState('pending');\n  const [state, setState] = useReducer(resetPasswordReducer, resetPasswordInitState);\n  const [encrpyt, setEncrypt] = useState({\n    input1: true,\n    input2: true\n  });\n  useEffect(() => {\n    fetch(`${SERVER}/${SECRET_KEY}/api/service/reset-password-auth`, {\n      headers: {\n        'reset-auth-token': token\n      }\n    }).then(res => res.json()).then(res => {\n      if (!res.status) {\n        setState({\n          type: 'set',\n          request: 'failed'\n        });\n        return;\n      }\n\n      setState({\n        type: 'set',\n        request: 'success'\n      });\n    });\n  }, []);\n\n  const onClickChange = () => {\n    fetch(``);\n  };\n\n  if (state.request === 'success') {\n    return /*#__PURE__*/_jsxDEV(View, {\n      style: styles.mainPane,\n      children: [/*#__PURE__*/_jsxDEV(View, {\n        style: styles.topPane,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          style: styles.title,\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Separator, {\n          vertical: 0.25\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          style: styles.subtitle,\n          children: \"Please be sure, the password you enter was not leaked to anyone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Separator, {\n        vertical: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(View, {\n        style: styles.bodyPane,\n        children: [/*#__PURE__*/_jsxDEV(TextInput, {\n          skinStyle: styles.inputSkin,\n          placeholder: \"New Password\",\n          showIndicator: true,\n          indicatorProgress: state.passwordStrength,\n          isTextEncrypt: state.isEncrypt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Separator, {\n          vertical: 0.5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          skinStyle: styles.inputSkin,\n          placeholder: \"Confirm Password\",\n          isTextEncrypt: state.isEncrypt,\n          onTextEncrypt: () => setState({\n            type: 'set',\n            isEncrypt: !state.isEncrypt\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Separator, {\n          vertical: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: styles.button,\n          title: \"Change\",\n          onClick: onClickChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (state.request === 'failed') {\n    return /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(LoadingPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n}\n\n_s(HomePage, \"CD6Mn59zCMB7lbVmSwITtxXMLDc=\", false, function () {\n  return [useParams];\n});\n\n_c = HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/Makaru/Documents/React Project/broowingcoffee-web-server/src/pages/ResetPassword/index.js"],"names":["useEffect","useReducer","useState","useParams","ErrorPage","LoadingPage","SECRET_KEY","SERVER","Text","TextInput","View","Separator","Button","styles","resetPassword","resetPasswordReducer","resetPasswordInitState","HomePage","token","request","setRequest","state","setState","encrpyt","setEncrypt","input1","input2","fetch","headers","then","res","json","status","type","onClickChange","mainPane","topPane","title","subtitle","bodyPane","inputSkin","passwordStrength","isEncrypt","button"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,QAAqC,OAArC;AACA,SAAQC,UAAR,EAAoBC,MAApB,QAAiC,WAAjC;AACA,SAAQC,IAAR,EAAcC,SAAd,EAAyBC,IAAzB,EAA+BC,SAA/B,EAA0CC,MAA1C,QAAuD,YAAvD;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAAQC,aAAa,IAAIC,oBAAzB,EAA+CC,sBAA/C,QAA4E,OAA5E;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAM;AAACC,IAAAA;AAAD,MAAUf,SAAS,EAAzB;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,SAAD,CAAtC;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBrB,UAAU,CAACc,oBAAD,EAAuBC,sBAAvB,CAApC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC;AAACuB,IAAAA,MAAM,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GAAD,CAAtC;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,KAAK,CAAE,GAAEpB,MAAO,IAAGD,UAAW,kCAAzB,EAA4D;AAC/DsB,MAAAA,OAAO,EAAE;AAAC,4BAAoBV;AAArB;AADsD,KAA5D,CAAL,CAGGW,IAHH,CAGQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHf,EAIGF,IAJH,CAIQC,GAAG,IAAI;AACX,UAAI,CAACA,GAAG,CAACE,MAAT,EAAiB;AACfV,QAAAA,QAAQ,CAAC;AAACW,UAAAA,IAAI,EAAE,KAAP;AAAcd,UAAAA,OAAO,EAAE;AAAvB,SAAD,CAAR;AACA;AACD;;AACDG,MAAAA,QAAQ,CAAC;AAACW,QAAAA,IAAI,EAAE,KAAP;AAAcd,QAAAA,OAAO,EAAE;AAAvB,OAAD,CAAR;AACD,KAVH;AAWD,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAMe,aAAa,GAAG,MAAM;AAC1BP,IAAAA,KAAK,CAAE,EAAF,CAAL;AACD,GAFD;;AAIA,MAAIN,KAAK,CAACF,OAAN,KAAkB,SAAtB,EAAiC;AAC/B,wBACE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAEN,MAAM,CAACsB,QAApB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEtB,MAAM,CAACuB,OAApB;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,KAAK,EAAEvB,MAAM,CAACwB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,SAAD;AAAW,UAAA,QAAQ,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,IAAD;AAAM,UAAA,KAAK,EAAExB,MAAM,CAACyB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,cARF,eASE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEzB,MAAM,CAAC0B,QAApB;AAAA,gCACE,QAAC,SAAD;AACE,UAAA,SAAS,EAAE1B,MAAM,CAAC2B,SADpB;AAEE,UAAA,WAAW,EAAC,cAFd;AAGE,UAAA,aAAa,EAAE,IAHjB;AAIE,UAAA,iBAAiB,EAAEnB,KAAK,CAACoB,gBAJ3B;AAKE,UAAA,aAAa,EAAEpB,KAAK,CAACqB;AALvB;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,SAAD;AAAW,UAAA,QAAQ,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,gBARF,eASE,QAAC,SAAD;AACE,UAAA,SAAS,EAAE7B,MAAM,CAAC2B,SADpB;AAEE,UAAA,WAAW,EAAC,kBAFd;AAGE,UAAA,aAAa,EAAEnB,KAAK,CAACqB,SAHvB;AAIE,UAAA,aAAa,EAAE,MAAMpB,QAAQ,CAAC;AAACW,YAAAA,IAAI,EAAE,KAAP;AAAcS,YAAAA,SAAS,EAAE,CAACrB,KAAK,CAACqB;AAAhC,WAAD;AAJ/B;AAAA;AAAA;AAAA;AAAA,gBATF,eAeE,QAAC,SAAD;AAAW,UAAA,QAAQ,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,gBAfF,eAgBE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE7B,MAAM,CAAC8B,MAAtB;AAA8B,UAAA,KAAK,EAAC,QAApC;AAA6C,UAAA,OAAO,EAAET;AAAtD;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA8BD;;AAED,MAAIb,KAAK,CAACF,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,wBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA9DuBF,Q;UACNd,S;;;KADMc,Q","sourcesContent":["import {useEffect, useReducer, useState} from 'react';\r\nimport {useParams} from 'react-router';\r\nimport {ErrorPage, LoadingPage} from 'pages';\r\nimport {SECRET_KEY, SERVER} from 'utils/env';\r\nimport {Text, TextInput, View, Separator, Button} from 'components';\r\nimport styles from './.module.css';\r\nimport {resetPassword as resetPasswordReducer, resetPasswordInitState} from 'hooks';\r\n\r\nexport default function HomePage() {\r\n  const {token} = useParams();\r\n  const [request, setRequest] = useState('pending');\r\n  const [state, setState] = useReducer(resetPasswordReducer, resetPasswordInitState);\r\n  const [encrpyt, setEncrypt] = useState({input1: true, input2: true});\r\n\r\n  useEffect(() => {\r\n    fetch(`${SERVER}/${SECRET_KEY}/api/service/reset-password-auth`, {\r\n      headers: {'reset-auth-token': token},\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (!res.status) {\r\n          setState({type: 'set', request: 'failed'});\r\n          return;\r\n        }\r\n        setState({type: 'set', request: 'success'});\r\n      });\r\n  }, []);\r\n\r\n  const onClickChange = () => {\r\n    fetch(``);\r\n  };\r\n\r\n  if (state.request === 'success') {\r\n    return (\r\n      <View style={styles.mainPane}>\r\n        <View style={styles.topPane}>\r\n          <Text style={styles.title}>New Password</Text>\r\n          <Separator vertical={0.25} />\r\n          <Text style={styles.subtitle}>\r\n            Please be sure, the password you enter was not leaked to anyone\r\n          </Text>\r\n        </View>\r\n        <Separator vertical={2} />\r\n        <View style={styles.bodyPane}>\r\n          <TextInput\r\n            skinStyle={styles.inputSkin}\r\n            placeholder='New Password'\r\n            showIndicator={true}\r\n            indicatorProgress={state.passwordStrength}\r\n            isTextEncrypt={state.isEncrypt}\r\n          />\r\n          <Separator vertical={0.5} />\r\n          <TextInput\r\n            skinStyle={styles.inputSkin}\r\n            placeholder='Confirm Password'\r\n            isTextEncrypt={state.isEncrypt}\r\n            onTextEncrypt={() => setState({type: 'set', isEncrypt: !state.isEncrypt})}\r\n          />\r\n          <Separator vertical={1} />\r\n          <Button style={styles.button} title='Change' onClick={onClickChange} />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (state.request === 'failed') {\r\n    return <ErrorPage />;\r\n  }\r\n\r\n  return <LoadingPage />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}